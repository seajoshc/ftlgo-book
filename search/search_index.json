{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Learning go</p>"},{"location":"journal/","title":"Journal","text":""},{"location":"journal/#20230216","title":"20230216","text":"<p>Started working through \"For the Love of Go\" by John Arundel last night. It's exactly what I was hoping for so far :)</p> <ul> <li>read testing docs</li> <li>checkout gofumpt for more opinionated formatting tool</li> <li>slices are arrays, a sequence of values of the same type</li> </ul>"},{"location":"new_projects/","title":"New Go projects","text":"<p>2023-02-16</p> <p>Every Go project needs two things: a folder on disk to keep its source code in, and a go.mod file which identifies the module, or project name.[0]</p> <p>Go organizes code into units called modules, and each module needs to be in a separate folder (you can\u2019t have modules within modules). Each module needs a go.mod file which tells Go that this folder contains a module, and what the name of the module is.[0]</p> <p><code>go mod init MODULE_NAME</code> initializes new project folder</p>"},{"location":"new_projects/#citations","title":"Citations","text":"<ul> <li>[0] For the Love of Go, by John Arundel</li> </ul>"},{"location":"testing/","title":"Testing","text":"<p>Test function signature - Must be in _test.go file - func name must start with Test - Must accept parameter whose type is *testing.T - Don't return anything - <code>t.Parallel()</code> is a standard statement/boilerplate for enabling test concurrency</p> <p>want-and-got pattern</p> <p>test cases, aka table tests, <code>for ... range</code> loop over a slice of structs with the test data</p> <p>One behavior, one test It\u2019s tempting to try to extend our table test to check both the result and the error value at the same time. But that\u2019s complicated, and we want tests to be simple. A useful way to think about this problem is to frame it in terms of behaviors, not functions.</p> <p>This material may be protected by copyright.But now we\u2019re saying there\u2019s another behavior, too. If the input is invalid, Divide\u2019s error result should be set to something that indicates a problem. For every different thing the function can do according to circumstances, we say it has a distinct behavior.</p>"}]}